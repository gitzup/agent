// Code generated by go-bindata. DO NOT EDIT.
// sources:
// api/schema/action.json (654B)
// api/schema/build.request.json (673B)
// api/schema/build.response.json (264B)
// api/schema/init.request.json (896B)
// api/schema/init.response.json (529B)
// api/schema/resource.json (685B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaActionJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x8f\xcd\x4e\xeb\x30\x10\x85\xf7\x79\x0a\xcb\xb7\x52\x2f\x82\xc6\xb0\x42\xf2\xa6\xaf\x80\xd8\x56\xad\x64\xec\x69\xea\x2a\xc9\x98\xf1\x04\x29\x54\x79\x77\xe4\xfc\x94\xb4\x94\x2d\x9b\x28\x3e\xfe\xbe\x99\xe3\x53\x26\x84\x10\x72\x11\xed\x01\x2a\x23\xb5\x90\x07\xe6\xa0\x95\x3a\x46\xac\x57\x43\x9a\x23\x15\xca\x91\xd9\xf3\xea\xf1\x59\x0d\xd9\x3f\xf9\x30\x9a\xde\xcd\xac\xc2\xf3\x67\x13\x72\x8b\xd5\xc8\xa9\x8f\x27\x65\x2c\x7b\xac\xf3\x34\x71\xb2\x1c\x44\x4b\x3e\xa4\x3c\xd9\xaf\x10\xb1\x21\x0b\x22\x10\x32\x5a\x2c\xc5\x72\x90\x96\xf9\x64\x70\x1b\x20\xa1\xf8\x76\x04\xcb\x53\x6a\x9c\xf3\x89\x33\xe5\x0b\x61\x00\x62\x0f\x51\x6a\xb1\x37\x65\x84\x11\x21\x78\x6f\x3c\x41\x6a\xb9\xe9\x93\x3e\xf5\x95\x29\x40\xf6\xe7\xed\x08\x86\xf9\x84\xd3\x35\x3a\x8f\x2e\x0a\x45\x26\x5f\x17\x63\xa1\xf3\x6d\x30\xcc\x40\xfd\xe3\x76\x9b\x9d\xde\xde\xff\x5f\x6b\xdd\xff\xdc\xad\x17\xf2\xcc\x76\xdf\x9a\x84\x9a\xa9\x0d\xe8\x6b\xfe\x7d\x99\x21\x32\xed\xf5\x2e\xcf\x50\xc5\x1f\xce\xad\x92\x17\x40\x77\xb3\x85\xad\xdc\x9f\xaf\xcf\x86\x6f\x97\x7d\x05\x00\x00\xff\xff\x0d\x2d\x74\xce\x8e\x02\x00\x00")

func schemaActionJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaActionJson,
		"schema/action.json",
	)
}

func schemaActionJson() (*asset, error) {
	bytes, err := schemaActionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/action.json", size: 654, mode: os.FileMode(420), modTime: time.Unix(1541190689, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x2a, 0xf6, 0x7e, 0xee, 0x47, 0xf7, 0x34, 0x2d, 0x1e, 0xc4, 0xac, 0x78, 0x9a, 0x39, 0x6b, 0x98, 0xff, 0x47, 0x98, 0x6a, 0x33, 0x79, 0x8a, 0xed, 0xd4, 0x5b, 0x98, 0xcd, 0x6d, 0xca, 0xef}}
	return a, nil
}

var _schemaBuildRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3f\x6b\xc3\x30\x10\xc5\x77\x7f\x8a\x43\xed\x58\x59\xe9\x54\x9a\x2d\x7b\x87\xcc\x0d\xa6\xc8\xd6\x39\x56\x70\x2c\x55\x77\x2e\x34\xc1\xdf\xbd\xc8\xff\x30\x54\x90\xc5\x58\x4f\xbf\xf7\xb8\xa7\xbb\x67\x00\x00\xe2\x99\xaa\x06\xaf\x5a\xec\x41\x34\xcc\x7e\xaf\xd4\x85\x5c\x27\x27\x35\x77\xe1\xac\x4c\xd0\x35\xcb\xdd\x9b\x9a\xb4\x27\xf1\x32\x3b\xad\xd9\xb8\xce\x96\x6f\xbd\xcf\x2b\x77\x9d\x39\xf5\xf3\xaa\xca\xde\xb6\x26\x0f\xf8\xdd\x23\x71\x1e\x83\x17\xb3\x41\xaa\x82\xf5\x6c\x5d\x17\x43\x0e\x30\xa2\xb0\xa0\x0b\xc6\xbf\x1e\xe3\xbd\x2b\x2f\x58\xf1\xa2\x6a\x63\x6c\x74\xea\xf6\x18\x9c\xc7\xc0\x16\x49\xec\xa1\xd6\x2d\xe1\x8c\xc4\x20\x1b\x30\x4e\x78\x1a\x95\x59\x25\xd7\x87\x0a\x49\x8c\x5a\x31\xc3\x7e\x9b\x72\x4f\xe1\x5b\x39\x35\xff\x87\x25\x06\x57\xc3\xea\x00\x76\x50\x22\x68\xef\x5b\x8b\x06\x34\x81\xd7\x61\x44\xb8\xb1\x94\x6e\xbb\x86\x27\x5b\xaf\xb7\x8f\xdb\xaf\xa8\xd7\xcc\x18\xba\x63\xba\xdf\x8a\x9d\xb4\xbc\x15\xf1\x73\x90\x9f\x3b\xf9\xfe\x25\xc7\x43\x91\x84\xa7\xd5\x07\xac\x1f\xed\x7e\x79\x8a\x69\xed\xff\x72\x86\x2c\x7d\x9a\xfe\x86\x6c\xc8\xfe\x02\x00\x00\xff\xff\x30\xc9\xf3\xf9\xa1\x02\x00\x00")

func schemaBuildRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaBuildRequestJson,
		"schema/build.request.json",
	)
}

func schemaBuildRequestJson() (*asset, error) {
	bytes, err := schemaBuildRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/build.request.json", size: 673, mode: os.FileMode(420), modTime: time.Unix(1541191365, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0x34, 0x75, 0x76, 0xec, 0x91, 0x7c, 0x5a, 0x8a, 0x7d, 0xec, 0x2f, 0x8f, 0xce, 0x25, 0xc, 0xc3, 0x5d, 0xe0, 0xc5, 0x76, 0xcb, 0x3c, 0xe8, 0x0, 0x62, 0xb7, 0xe2, 0x53, 0xf6, 0x5c, 0x8d}}
	return a, nil
}

var _schemaBuildResponseJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\x41\x4e\x85\x30\x10\xc6\xf1\x3d\xa7\x98\x54\x97\xd2\xea\xca\x84\x9d\x37\x70\x6f\x5c\x94\x76\x80\x21\x40\xeb\x74\x30\x51\xc2\xdd\x5f\xfa\x28\x2f\x6c\xbf\xfc\xfe\x93\xd9\x2a\x00\x00\xf5\x9c\xdc\x80\xb3\x55\x0d\xa8\x41\x24\x36\xc6\x8c\x29\x2c\xf5\xb1\xea\xc0\xbd\xf1\x6c\x3b\xa9\x5f\xdf\xcd\xb1\x3d\xa9\x97\x52\x92\xbf\x54\x3d\xc9\xff\x1a\xb5\x0b\x73\x71\xe6\xf7\xcd\xb4\x2b\x4d\x5e\x33\xa6\x18\x96\x84\x3a\x5f\x3e\x6b\x8f\xc9\x31\x45\xa1\xb0\xe4\x2b\x1f\x70\xb7\xf0\xb0\xa7\x93\xbf\x88\x19\x84\x76\x44\x27\xe7\x6a\xbd\xa7\x9c\xda\xe9\x93\x43\x44\x16\xc2\xa4\x1a\xe8\xec\x94\xb0\x10\xc6\x9f\x95\x18\xf3\x8f\x5f\xf0\x5d\xc6\x78\xd5\x1b\xec\xd5\x5e\xdd\x02\x00\x00\xff\xff\xac\x3d\x97\x59\x08\x01\x00\x00")

func schemaBuildResponseJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaBuildResponseJson,
		"schema/build.response.json",
	)
}

func schemaBuildResponseJson() (*asset, error) {
	bytes, err := schemaBuildResponseJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/build.response.json", size: 264, mode: os.FileMode(420), modTime: time.Unix(1541191410, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0x42, 0xe1, 0x9f, 0x17, 0xf9, 0x93, 0xec, 0x22, 0x35, 0x64, 0xfc, 0x44, 0x9e, 0xad, 0xa7, 0x3b, 0xca, 0xd0, 0x32, 0xa6, 0xd1, 0x97, 0xef, 0x50, 0xa7, 0x85, 0x7f, 0xc5, 0x23, 0xec, 0xac}}
	return a, nil
}

var _schemaInitRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x6e\xf2\x30\x14\x85\xf7\x3c\x85\xe5\xff\x97\x18\x8a\x13\x98\xaa\x66\xeb\x58\xa9\x43\xd5\xb1\x28\x83\x6b\x5f\x82\x11\xb1\x5d\xfb\x52\xa9\xa0\xbc\x7b\x65\xe2\x98\x04\x82\x18\xba\xe1\x73\x7c\xbe\x7b\x7c\xc9\x31\x23\x84\x10\xfa\xdf\x8b\x0d\x34\x9c\x96\x84\x6e\x10\x6d\x59\x14\x5b\x6f\x34\xeb\xd4\xdc\xb8\xba\x90\x8e\xaf\x91\x2d\x1e\x8b\x4e\xfb\x47\xe7\x31\xa9\xe4\x20\x55\x2b\x3c\xec\x6d\x2e\x4c\x13\xef\x15\xdf\xcb\x42\x69\x85\xb9\x83\xaf\x3d\x78\xcc\x03\xb7\xcf\x4a\xf0\xc2\x29\x8b\xca\xe8\xc0\x78\x07\x6f\xf6\x4e\x00\xb1\xce\xa0\x11\x66\x47\x66\x21\x3a\x23\x7d\xb6\xcf\xe1\x8f\x85\x10\x30\x9f\x5b\x10\xd8\xab\x5c\x4a\x15\x50\x7c\xf7\xe6\x8c\x05\x87\x0a\x3c\x2d\xc9\x9a\xef\x3c\xc4\x2b\x01\xa4\x1c\x84\xc6\xab\x93\x92\x54\xf0\xf8\x22\xe9\x3c\x1c\xba\x12\xf4\xe4\x57\x31\x68\x87\xc4\xe3\x54\x74\x28\x8f\x4a\x7a\x74\x4a\xd7\xb1\x64\x72\x1b\xa5\x5f\x41\xd7\xb8\xa1\x25\x59\x26\xab\x9d\x0f\xd1\xb1\xc8\x4d\xf2\xe8\xf9\xc9\xbd\xbf\x86\x51\xfb\xab\x75\x24\x57\xf3\x06\x2e\xe0\xe7\xf1\x23\xb9\xba\xe0\xde\xd8\xd6\x98\x3c\xe5\xdc\x5f\xdc\x79\x06\x47\x04\x77\xfa\x6e\x56\x9c\x1d\xaa\x15\xe3\xec\xf0\xcc\x3e\x16\xec\xa9\x7a\xa0\x57\x99\xf6\xd6\x43\xfe\x58\x63\xfa\x7f\x4c\x53\xb3\xe9\x53\xf7\xab\xcd\xda\xec\x37\x00\x00\xff\xff\xf4\x12\xf4\x52\x80\x03\x00\x00")

func schemaInitRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaInitRequestJson,
		"schema/init.request.json",
	)
}

func schemaInitRequestJson() (*asset, error) {
	bytes, err := schemaInitRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/init.request.json", size: 896, mode: os.FileMode(420), modTime: time.Unix(1541191535, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x9d, 0xe, 0x6, 0x78, 0x79, 0xe8, 0x41, 0xee, 0xd1, 0x1e, 0x4e, 0x32, 0xba, 0xf2, 0xd9, 0x1f, 0xb3, 0x38, 0xab, 0x29, 0xda, 0xa9, 0x12, 0xef, 0x54, 0x45, 0x99, 0xc2, 0xfd, 0xbc, 0x58}}
	return a, nil
}

var _schemaInitResponseJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xb1\x4e\x03\x31\x0c\x86\xf7\x3e\x45\x14\x90\xba\xb4\x17\x98\x90\x6e\xe3\x0d\x10\x8c\x88\x21\x24\xbe\xab\xab\x6b\x1c\x1c\x1f\x12\x54\x7d\x77\x94\xe4\xae\xbd\x81\x0a\x96\x0c\x5f\xfc\xfd\xb6\xec\xe3\x4a\x29\xa5\xf4\x6d\x72\x3b\x38\x58\xdd\x2a\xbd\x13\x89\xad\x31\xfb\x44\x61\x5b\x69\x43\xdc\x1b\xcf\xb6\x93\xed\xdd\x83\xa9\xec\x46\x6f\x26\x13\xfd\xc2\xea\x51\xbe\xc7\xd8\x38\x3a\x4c\x75\xe6\xf3\xde\x60\x40\x69\x18\x52\xa4\x90\xa0\xc9\xc1\xb3\xec\x21\x39\xc6\x28\x48\x21\x87\x3c\x43\xa2\x91\x1d\xa8\xc8\x24\xe4\x68\x50\xeb\xec\xae\xd5\x59\x9e\x45\xf9\x8a\x90\x0d\x7a\xdf\x83\x93\x99\x5a\xef\x31\x67\xd9\xe1\x89\x29\x02\x0b\x42\xd2\xad\xea\xec\x90\x60\x2a\x61\xf8\x18\x91\x21\xcf\xfc\x5a\x48\xa1\x8e\x42\x87\xfd\x4b\xdd\xc1\xe6\xc2\x93\x58\x81\x47\x57\xe6\x2b\xf4\x6d\x8a\x89\xcb\xfc\xe3\x95\xa0\xe5\x4f\xdd\x15\x43\xf7\xff\x15\xeb\xb3\x7c\xba\x32\xd2\x5f\x0d\x7e\xbd\x86\x2d\x6e\x3d\xc3\xa5\xc3\xaa\xbe\xa7\xd5\x4f\x00\x00\x00\xff\xff\xfa\x3b\x73\x31\x11\x02\x00\x00")

func schemaInitResponseJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaInitResponseJson,
		"schema/init.response.json",
	)
}

func schemaInitResponseJson() (*asset, error) {
	bytes, err := schemaInitResponseJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/init.response.json", size: 529, mode: os.FileMode(420), modTime: time.Unix(1541191728, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0xd5, 0x7c, 0x81, 0x84, 0xea, 0x19, 0x72, 0x44, 0x93, 0xf4, 0x53, 0x2d, 0x49, 0x6e, 0xa4, 0x1b, 0x5c, 0xa3, 0x27, 0x9d, 0xe0, 0x41, 0xd0, 0x8d, 0xe5, 0x72, 0xce, 0x74, 0xc9, 0xc9, 0x2b}}
	return a, nil
}

var _schemaResourceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x4e\xf3\x30\x10\xc4\xef\x7d\x8a\x95\xbf\xef\x00\x12\x4d\x40\x1c\x90\x72\x43\xe2\xc8\x01\x21\x6e\x88\x83\x71\x36\xce\x96\xc6\x36\xeb\x35\x02\xaa\xbe\x3b\x72\xf3\xa7\x69\x01\x89\x4b\xa4\xcc\xfe\x76\x33\x93\xd9\x2c\x00\x00\xd4\xff\x68\x5a\xec\xb4\xaa\x40\xb5\x22\xa1\x2a\xcb\x55\xf4\x6e\xd9\xab\x85\x67\x5b\xd6\xac\x1b\x59\x9e\x5f\x95\xbd\xf6\x4f\x9d\x0d\x9b\x54\xcf\xb6\x2c\xc9\x67\x0a\x85\xf1\xdd\xc0\x95\x6f\x17\x25\x63\xf4\x89\x0d\x16\xf9\xe6\xb8\x57\x63\x34\x4c\x41\xc8\xbb\xbc\x7f\x0d\x23\x05\x31\xa0\xa1\x86\x8c\xce\xb3\x62\xe4\xe5\x23\x60\x06\xfd\xf3\x0a\x8d\x8c\xaa\xae\x6b\xca\x98\x5e\xdf\xb1\x0f\xc8\x42\x18\x55\x05\x8d\x5e\x47\x1c\x10\xc6\xd7\x44\x8c\xd9\xe5\xe3\x4e\xd9\x9f\xdb\xbd\x3e\x0d\x5c\x98\x1f\xd8\x1c\x91\x73\xe5\x27\xfb\xf7\xa3\xf9\x4c\x17\xf0\xd0\x52\x04\x8a\xa0\xe1\xc6\x9b\x17\x64\xa0\x4e\x5b\x04\xc6\x06\x19\x9d\x41\x38\x21\x67\xd6\xa9\x26\x67\x41\x5a\x04\xd1\xf6\x74\x4c\x7a\xfc\x61\x15\x85\xc9\xd9\xe3\x69\x47\xee\x16\x9d\x95\x56\x55\x70\x39\x8d\xb6\x7b\x4a\x19\xef\x1a\xb2\x7f\xb7\xde\xf3\x89\xfb\xff\x3e\x65\x88\xe8\x04\xc4\xef\x7c\x4e\x1d\x1d\xc4\xf2\x0e\xf0\x1d\x4d\x9a\xf7\xf5\x2d\xc5\x41\x6f\xd3\xf4\x97\xfe\x84\x13\xee\x33\x2d\xfa\xe7\x76\xf1\x15\x00\x00\xff\xff\x02\x4c\x42\xf2\xad\x02\x00\x00")

func schemaResourceJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaResourceJson,
		"schema/resource.json",
	)
}

func schemaResourceJson() (*asset, error) {
	bytes, err := schemaResourceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/resource.json", size: 685, mode: os.FileMode(420), modTime: time.Unix(1541191992, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8a, 0x17, 0x74, 0xd3, 0x6, 0xa2, 0x18, 0x7f, 0xc8, 0x43, 0x30, 0xbd, 0xd8, 0xf8, 0x43, 0xd5, 0x5d, 0x14, 0xa7, 0x7b, 0x79, 0x44, 0x33, 0x81, 0x76, 0x19, 0x6b, 0xe5, 0xf2, 0xd1, 0x7d, 0xae}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/action.json": schemaActionJson,

	"schema/build.request.json": schemaBuildRequestJson,

	"schema/build.response.json": schemaBuildResponseJson,

	"schema/init.request.json": schemaInitRequestJson,

	"schema/init.response.json": schemaInitResponseJson,

	"schema/resource.json": schemaResourceJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"action.json":         &bintree{schemaActionJson, map[string]*bintree{}},
		"build.request.json":  &bintree{schemaBuildRequestJson, map[string]*bintree{}},
		"build.response.json": &bintree{schemaBuildResponseJson, map[string]*bintree{}},
		"init.request.json":   &bintree{schemaInitRequestJson, map[string]*bintree{}},
		"init.response.json":  &bintree{schemaInitResponseJson, map[string]*bintree{}},
		"resource.json":       &bintree{schemaResourceJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
